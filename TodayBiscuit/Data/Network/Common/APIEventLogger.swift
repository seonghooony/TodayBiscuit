//
//  APIEventLogger.swift
//  TodayBiscuit
//
//  Created by seonghoonkim on 2/8/24.
//

import Alamofire
import Foundation

class APIEventLogger: EventMonitor {
    
    let queue = DispatchQueue(label: "NetworkLogger")
    
    func requestDidResume(_ request: Request) {
        Log.network(
            "----------------------------------------------------\n" +
            "              üõ∞ NETWORK Reqeust LOG\n" +
            "----------------------------------------------------")
        
        Log.network(
            "1Ô∏è‚É£ URL / Method / Header" + "\n" +
            "URL: " + (request.request?.url?.absoluteString ?? "")  + "\n" +
            "Method: " + (request.request?.httpMethod ?? "") + "\n" +
            "Headers: " + "\(request.request?.allHTTPHeaderFields ?? [:])")

        Log.network("2Ô∏è‚É£ Body")
        if let body = request.request?.httpBody?.toPrettyPrintedString {
            Log.network("Body: \(body)")
        } else {
            Log.network("Î≥¥ÎÇ∏ BodyÍ∞Ä ÏóÜÏäµÎãàÎã§.")
        }
        
    }
    
//    func requestDidFinish(_ request: Request) {
//        Log.network(
//            "----------------------------------------------------\n\n" +
//            "              üõ∞ NETWORK Reqeust LOG\n" +
//            "\n----------------------------------------------------")
//        
//        Log.network(
//            "1Ô∏è‚É£ URL / Method / Header" + "\n" +
//            "URL: " + (request.request?.url?.absoluteString ?? "")  + "\n" +
//            "Method: " + (request.request?.httpMethod ?? "") + "\n" +
//            "Headers: " + "\(request.request?.allHTTPHeaderFields ?? [:])")
//
//        Log.network("----------------------------------------------------\n2Ô∏è‚É£ Body")
//        if let body = request.request?.httpBody?.toPrettyPrintedString {
//            Log.network("Body: \(body)")
//        } else {
//            Log.network("Î≥¥ÎÇ∏ BodyÍ∞Ä ÏóÜÏäµÎãàÎã§.")
//        }
//        Log.network("----------------------------------------------------\n")
//    }
    
    func request<Value>(_ request: DataRequest, didParseResponse response: DataResponse<Value, AFError>) {
        Log.network(
            "----------------------------------------------------\n" +
            "              üõ∞ NETWORK Response LOG \n" +
            "----------------------------------------------------")
        
        
        switch response.result {
            
        case .success(_):
            Log.network("3Ô∏è‚É£ ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÑ±Í≥µ")
        case .failure(_):
            Log.network("3Ô∏è‚É£ ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®")
            Log.network("Ïò¨Î∞îÎ•∏ URLÏù∏ÏßÄ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.")
        }
        
        Log.network("StatusCode: " + "\(response.response?.statusCode ?? 0)")
        
//        Log.network("Result: " + "\(response.result)" + "\n"
//            + "StatusCode: " + "\(response.response?.statusCode ?? 0)"
//        )
        
        if let statusCode = response.response?.statusCode {
            switch statusCode {
            case 400..<500:
                Log.network("‚ùóÏò§Î•ò Î∞úÏÉù : RequestError\n" + "ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§. requestÎ•º Ïû¨ÏûëÏÑ± Ìï¥Ï£ºÏÑ∏Ïöî.")
            case 500:
                Log.network("‚ùóÏò§Î•ò Î∞úÏÉù : ServerError\n" + "ServerÏóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")
            default:
                break
            }
        }
        
        Log.network("4Ô∏è‚É£ Data ÌôïÏù∏ÌïòÍ∏∞")
        if let response = response.data?.toPrettyPrintedString {
            Log.network(response)
        } else { 
            Log.network("‚ùóÎç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÍ±∞ÎÇò, EncodingÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
        }
        
        Log.network("---------------üõ∞ NETWORK Finished -----------------")
    }
    
    func request(_ request: Request, didFailTask task: URLSessionTask, earlyWithError error: AFError) {
        Log.network("URLSessionTaskÍ∞Ä Fail ÌñàÏäµÎãàÎã§.")
    }
    
    func request(_ request: Request, didFailToCreateURLRequestWithError error: AFError) {
        Log.network("URLRequestÎ•º ÎßåÎì§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
    }
    
    func requestDidCancel(_ request: Request) {
        Log.network("requestÍ∞Ä cancel ÎêòÏóàÏäµÎãàÎã§")
    }
}

// https://jazz-the-it.tistory.com/36
